{"version":3,"sources":["config/index.ts","store/cart/index.ts","services/axiosInstance.ts","services/orderService.ts","store/order/index.ts","store/user/index.ts","services/userService.ts","utils/isObjectEmpty.ts","components/Header/index.tsx","components/Footer/index.tsx","components/Rating/index.tsx","components/ProductCard/index.tsx","components/Loader/index.tsx","components/Message/index.tsx","services/productService.ts","store/productList/index.ts","store/productDetail/index.ts","pages/HomePage.tsx","utils/makeQtySelect.ts","pages/ProductPage.tsx","pages/CartPage.tsx","components/FormContainer/index.tsx","pages/SignInPage.tsx","pages/SignUpPage.tsx","pages/UserPage.tsx","components/CheckoutSteps/index.tsx","hooks/useCheckout.ts","pages/ShippingPage.tsx","pages/PaymentPage.tsx","hooks/useSummary.ts","utils/addDecimals.ts","pages/PlaceOrderPage.tsx","pages/OrderSuccess.tsx","pages/OrderDetails.tsx","components/App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["AppRoutes","CartActionTypes","cartRemoveProduct","id","type","CART_REMOVE_PRODUCT","payload","cartAddPaymentMethod","paymentMethod","CART_ADD_PAYMENT_METHOD","asyncAddCartProduct","qty","dispatch","getState","a","axios","get","data","product","_id","name","image","price","countInStock","CART_ADD_PRODUCT","localStorage","setItem","JSON","stringify","cart","cartItems","console","error","message","asyncCartReset","CART_RESET","removeItem","cartState","axiosInstance","create","baseURL","interceptors","request","use","config","headers","storedUser","getItem","user","parse","token","authorization","getAuthToken","Promise","reject","OrderActionTypes","OrderService","createOrder","order","post","getOrders","getOrderDetails","orderPay","paymentResult","put","UserActionTypes","orderCrerateSuccess","ORDER_CREATE_SUCCESS","orderPaySuccess","ORDER_DETAILS_SUCCESS","asyncGetOrder","ORDER_DETAILS_REQUEST","response","ORDER_DETAILS_FAILED","orderState","orders","lastOrder","loading","success","AuthService","signIn","signUp","getUser","updateUser","signInSuccess","SIGNIN_SUCCESS","asyncSignIn","SIGNIN_REQUEST","SIGNIN_FAILED","asyncUpdateUser","userCreds","USER_UPDATE_REQUEST","store","currentUser","Object","assign","userUpdated","USER_UPDATE_SUCCESS","USER_UPDATE_FAILED","isSignedIn","userState","email","isAdmin","shippingAddress","city","address","country","postalCode","isObjectEmpty","obj","keys","length","constructor","isObjectFull","objLength","values","filter","x","undefined","Header","useDispatch","history","useHistory","useSelector","state","useState","Navbar","bg","expand","variant","Container","to","HOME","Brand","Toggle","aria-controls","Collapse","Nav","className","CART","Link","NavDropdown","title","PROFILE","Item","onClick","event","preventDefault","USER_SIGNOUT","ORDER_RESET","push","SIGNIN","WrappedComponent","simpleHOC","Row","Col","this","props","React","Component","Rating","value","text","color","reviewsStyle","style","defaultProps","marginLeft","ProductCard","category","rating","numReviews","Card","width","Img","src","Body","Title","Text","Loader","Spinner","animation","role","height","display","margin","Message","children","Alert","ProductActionTypes","ProductService","getProducts","getProductById","productState","products","HomePage","useEffect","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAILED","map","key","sm","makeQtySelect","qtyArray","i","ProductPage","setQtyArray","setQty","useParams","productDetail","PRODUCT_DETAIL_REQUEST","PRODUCT_DETAIL_SUCCESS","PRODUCT_DETAIL_FAILED","asyncGetProduct","description","Image","fluid","ListGroup","Form","Group","Control","as","onChange","parseInt","target","Button","CartPage","search","useLocation","split","alt","PRODUCT","asyncRemoveCartProduct","reduce","acc","Subtitle","toFixed","getProductTotalPrice","route","SHIPPING","size","block","FormContainer","setTimeout","CLEAR_ERROR","xs","md","SignInPage","setEmail","password","setPassword","redirect","onSubmit","Label","placeholder","SignUpPage","setName","SIGNUP_REQUEST","SIGNUP_FAILED","UserPage","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_LIST_FAILED","controlId","Table","striped","bordered","hover","responsive","index","createdAt","substring","totalPrice","isPaid","paidAt","isDelivered","deliveredAt","ORDER_DETAILS","CheckoutSteps","step1","step2","step3","disabled","PAYMENT","PLACE_ORDER","useCheckout","ShippingPage","setAddress","setCity","setPostalCode","setCountry","lg","PaymentPage","setPaymentMethod","paymentMethods","label","isChecked","asyncCartAddPaymentMethod","payment","Check","checked","useSummary","itemsPrice","setItemsPrice","shippingPrice","setShippingPrice","taxPrice","setTaxPrice","setTotalPrice","taxPriceCalc","num","Number","current","itemsPriceCalc","shippingPriceCalc","totalPriceCalc","PlaceOrderPage","isPlaced","ORDER_SUCCESS","orderItems","ORDER_CREATE_REQUEST","ORDER_CREATE_FAILED","OrderSuccess","ORDER_CLEAR_LAST","OrderDetails","orderId","successPay","loadingPay","sdkReady","setSdkReady","addPaypalScript","clientId","script","document","createElement","async","onload","body","appendChild","ORDER_PAY_RESET","window","paypal","amount","onSuccess","asyncOrderPay","PrivateRoute","component","rest","render","App","exact","path","SIGNUP","Boolean","location","hostname","match","reducers","combineReducers","action","item","isExist","find","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAILED","middlewares","thunk","persistCartItems","persistUser","persistPaymentMethod","initialState","createStore","composeWithDevTools","applyMiddleware","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.06a4a292.chunk.js","sourcesContent":["export enum AppRoutes {\r\n    HOME = '/',\r\n    SIGNIN = '/signin',\r\n    SIGNUP = '/signup',\r\n    CART = '/cart',\r\n    PRODUCT = '/product',\r\n    PROFILE = '/profile',\r\n    SHIPPING = '/shipping',\r\n    PAYMENT = '/payment',\r\n    CHECKOUT = '/checkout',\r\n    PLACE_ORDER = '/place_order',\r\n    ORDER_SUCCESS = '/order_success',\r\n    ORDER_DETAILS = '/order_details',\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport axios from 'axios';\r\nimport { CartProduct, Product } from '../../types';\r\n\r\nimport { StoreRootState } from '../index';\r\n\r\n/**\r\n * * Actions\r\n */\r\n\r\nenum CartActionTypes {\r\n    CART_ADD_PRODUCT = 'CART_ADD_PRODUCT',\r\n    CART_REMOVE_PRODUCT = 'CART_REMOVE_PRODUCT',\r\n    CART_RESET = 'CART_RESET',\r\n    CART_ADD_PAYMENT_METHOD = 'CART_ADD_PAYMENT_METHOD',\r\n}\r\n\r\ninterface CartAddProduct {\r\n    type: CartActionTypes.CART_ADD_PRODUCT;\r\n    payload: CartProduct;\r\n}\r\n\r\ninterface CartRemoveProduct {\r\n    type: CartActionTypes.CART_REMOVE_PRODUCT;\r\n    payload: string;\r\n}\r\n\r\ninterface CartAddPaymentMethod {\r\n    type: CartActionTypes.CART_ADD_PAYMENT_METHOD;\r\n    payload: string;\r\n}\r\n\r\ninterface CartResetAction {\r\n    type: CartActionTypes.CART_RESET;\r\n}\r\n\r\ntype CartActions =\r\n    | CartAddProduct\r\n    | CartRemoveProduct\r\n    | CartAddPaymentMethod\r\n    | CartResetAction;\r\n\r\nconst cartAddProduct = function (product: CartProduct): CartActions {\r\n    return {\r\n        type: CartActionTypes.CART_ADD_PRODUCT,\r\n        payload: product,\r\n    };\r\n};\r\n\r\nconst cartRemoveProduct = function (id: string): CartActions {\r\n    return {\r\n        type: CartActionTypes.CART_REMOVE_PRODUCT,\r\n        payload: id,\r\n    };\r\n};\r\n\r\nexport const cartAddPaymentMethod = function (\r\n    paymentMethod: string\r\n): CartActions {\r\n    return {\r\n        type: CartActionTypes.CART_ADD_PAYMENT_METHOD,\r\n        payload: paymentMethod,\r\n    };\r\n};\r\n\r\nconst cartReset = function (): CartActions {\r\n    return {\r\n        type: CartActionTypes.CART_RESET,\r\n    };\r\n};\r\n\r\n/**\r\n * * Async actions\r\n */\r\n\r\nexport const asyncAddCartProduct = (id: string, qty: number) => async (\r\n    dispatch: Dispatch<CartActions>,\r\n    getState: () => StoreRootState\r\n) => {\r\n    try {\r\n        const { data } = await axios.get<Product>(\r\n            `http://localhost:5000/api/products/${id}`\r\n        );\r\n\r\n        if (data) {\r\n            dispatch(\r\n                cartAddProduct({\r\n                    id: data._id,\r\n                    name: data.name,\r\n                    image: data.image,\r\n                    price: data.price,\r\n                    countInStock: data.countInStock,\r\n                    qty,\r\n                })\r\n            );\r\n\r\n            localStorage.setItem(\r\n                'cartItems',\r\n                JSON.stringify(getState().cart.cartItems)\r\n            );\r\n        }\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncCartAddPaymentMethod = (paymentMethod: string) => async (\r\n    dispatch: Dispatch<CartActions>,\r\n    getState: () => StoreRootState\r\n) => {\r\n    try {\r\n        dispatch(cartAddPaymentMethod(paymentMethod));\r\n\r\n        localStorage.setItem(\r\n            'paymentMethod',\r\n            JSON.stringify(getState().cart.paymentMethod)\r\n        );\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncRemoveCartProduct = (id: string) => async (\r\n    dispatch: Dispatch<CartActions>,\r\n    getState: () => StoreRootState\r\n) => {\r\n    try {\r\n        dispatch(cartRemoveProduct(id));\r\n\r\n        localStorage.setItem(\r\n            'cartItems',\r\n            JSON.stringify(getState().cart.cartItems)\r\n        );\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncCartReset = () => async (dispatch: Dispatch<CartActions>) => {\r\n    try {\r\n        dispatch(cartReset());\r\n\r\n        localStorage.removeItem('cartItems');\r\n        localStorage.removeItem('paymentMethod');\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n/**\r\n * * Reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\n\r\nexport interface CartState {\r\n    cartItems: CartProduct[];\r\n    paymentMethod: string | null;\r\n}\r\n\r\nconst cartState: CartState = {\r\n    cartItems: [],\r\n    paymentMethod: null,\r\n};\r\n\r\nexport const cartReducer = (\r\n    state: CartState = cartState,\r\n    action: CartActions\r\n): CartState => {\r\n    switch (action.type) {\r\n        case CartActionTypes.CART_ADD_PRODUCT:\r\n            const item = action.payload;\r\n            const isExist = state.cartItems.find((product: CartProduct) => {\r\n                return product.id === item.id;\r\n            });\r\n\r\n            if (isExist) {\r\n                return {\r\n                    ...state,\r\n                    cartItems: state.cartItems.map((product: CartProduct) => {\r\n                        return product.id === isExist.id ? item : product;\r\n                    }),\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item],\r\n                };\r\n            }\r\n        case CartActionTypes.CART_REMOVE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(\r\n                    (product: CartProduct) => action.payload !== product.id\r\n                ),\r\n            };\r\n        case CartActionTypes.CART_ADD_PAYMENT_METHOD:\r\n            return {\r\n                ...state,\r\n                paymentMethod: action.payload,\r\n            };\r\n        case CartActionTypes.CART_RESET:\r\n            return cartState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import axios, { AxiosPromise } from 'axios';\r\nimport { User } from '../types';\r\n\r\nexport function getAuthToken() {\r\n    const storedUser = localStorage.getItem('user');\r\n    let user: User = {} as User;\r\n    if (storedUser) {\r\n        user = JSON.parse(storedUser);\r\n    }\r\n\r\n    if (user && user.token) {\r\n        // for Express back-end\r\n        return { authorization: `Bearer ${user.token}` };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\n// Set config defaults when creating the instance\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/api/',\r\n});\r\n\r\n// Alter defaults after instance has been created\r\naxiosInstance.interceptors.request.use(\r\n    function (config) {\r\n        config.headers = { ...config.headers, ...getAuthToken() };\r\n        // you can also do other modification in config\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n","import { AxiosPromise } from 'axios';\r\nimport { axiosInstance } from './axiosInstance';\r\n\r\nimport { Order, OrderCreate, OrderListItem } from '../types';\r\n\r\ninterface OrderService {\r\n    createOrder(order: OrderCreate): AxiosPromise<Order>;\r\n    getOrders(): AxiosPromise<OrderListItem[]>;\r\n    getOrderDetails(id: string): AxiosPromise<Order>;\r\n    orderPay(id: string, paymentResult: any): AxiosPromise<Order>;\r\n}\r\n\r\nexport const OrderService: OrderService = {\r\n    createOrder,\r\n    getOrders,\r\n    getOrderDetails,\r\n    orderPay,\r\n};\r\n\r\nfunction createOrder(order: OrderCreate) {\r\n    return axiosInstance.post<Order>(`/orders`, order);\r\n}\r\n\r\nfunction getOrderDetails(id: string) {\r\n    return axiosInstance.get<Order>(`/orders/${id}`);\r\n}\r\n\r\nfunction getOrders() {\r\n    return axiosInstance.get<OrderListItem[]>(`/orders`);\r\n}\r\n\r\nfunction orderPay(id: string, paymentResult: any) {\r\n    return axiosInstance.put<Order>(`/orders/${id}/pay`, { paymentResult });\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport { Order, OrderCreate, OrderListItem } from '../../types';\r\n\r\n// Services\r\nimport { OrderService } from '../../services/orderService';\r\n\r\n/**\r\n * * Actions\r\n */\r\n\r\nenum OrderActionTypes {\r\n    ORDER_LIST_REQUEST = 'ORDER_LIST_REQUEST',\r\n    ORDER_LIST_SUCCESS = 'ORDER_LIST_SUCCESS',\r\n    ORDER_LIST_FAILED = 'ORDER_LIST_FAILED',\r\n\r\n    ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST',\r\n    ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS',\r\n    ORDER_CREATE_FAILED = 'ORDER_CREATE_FAILED',\r\n\r\n    ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST',\r\n    ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS',\r\n    ORDER_DETAILS_FAILED = 'ORDER_DETAILS_FAILED',\r\n\r\n    ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST',\r\n    ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS',\r\n    ORDER_PAY_FAILED = 'ORDER_PAY_FAILED',\r\n    ORDER_PAY_RESET = 'ORDER_PAY_RESET',\r\n\r\n    ORDER_CLEAR_LAST = 'ORDER_CLEAR_LAST',\r\n\r\n    ORDER_RESET = 'ORDER_RESET',\r\n}\r\n\r\ninterface OrderListRequestAction {\r\n    type: OrderActionTypes.ORDER_LIST_REQUEST;\r\n}\r\n\r\ninterface OrderListSuccessAction {\r\n    type: OrderActionTypes.ORDER_LIST_SUCCESS;\r\n    payload: OrderListItem[];\r\n}\r\n\r\ninterface OrderListFailedAction {\r\n    type: OrderActionTypes.ORDER_LIST_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface OrderCreateRequestAction {\r\n    type: OrderActionTypes.ORDER_CREATE_REQUEST;\r\n}\r\n\r\ninterface OrderCreateSuccessAction {\r\n    type: OrderActionTypes.ORDER_CREATE_SUCCESS;\r\n    payload: Order;\r\n}\r\n\r\ninterface OrderCreateFailedAction {\r\n    type: OrderActionTypes.ORDER_CREATE_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface OrderDetailsRequestAction {\r\n    type: OrderActionTypes.ORDER_DETAILS_REQUEST;\r\n}\r\n\r\ninterface OrderDetailsSuccessAction {\r\n    type: OrderActionTypes.ORDER_DETAILS_SUCCESS;\r\n    payload: Order;\r\n}\r\n\r\ninterface OrderDetailsFailedAction {\r\n    type: OrderActionTypes.ORDER_DETAILS_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface OrderPayRequestAction {\r\n    type: OrderActionTypes.ORDER_PAY_REQUEST;\r\n}\r\n\r\ninterface OrderPaySuccessAction {\r\n    type: OrderActionTypes.ORDER_PAY_SUCCESS;\r\n    payload: any;\r\n}\r\n\r\ninterface OrderPayFailedAction {\r\n    type: OrderActionTypes.ORDER_PAY_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface OrderClearLastAction {\r\n    type: OrderActionTypes.ORDER_CLEAR_LAST;\r\n}\r\n\r\ninterface OrderPayResetAction {\r\n    type: OrderActionTypes.ORDER_PAY_RESET;\r\n}\r\n\r\ninterface OrderResetAction {\r\n    type: OrderActionTypes.ORDER_RESET;\r\n}\r\n\r\ntype OrderActions =\r\n    | OrderListRequestAction\r\n    | OrderListSuccessAction\r\n    | OrderListFailedAction\r\n    | OrderCreateRequestAction\r\n    | OrderCreateSuccessAction\r\n    | OrderCreateFailedAction\r\n    | OrderDetailsRequestAction\r\n    | OrderDetailsSuccessAction\r\n    | OrderDetailsFailedAction\r\n    | OrderPayRequestAction\r\n    | OrderPaySuccessAction\r\n    | OrderPayFailedAction\r\n    | OrderPayResetAction\r\n    | OrderResetAction\r\n    | OrderClearLastAction;\r\n\r\nconst orderListRequest = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_LIST_REQUEST,\r\n    };\r\n};\r\n\r\nconst orderListSuccess = function (order: OrderListItem[]): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_LIST_SUCCESS,\r\n        payload: order,\r\n    };\r\n};\r\n\r\nconst orderListFailed = function (error: string): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_LIST_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst orderCrerateRequest = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_CREATE_REQUEST,\r\n    };\r\n};\r\n\r\nconst orderCrerateSuccess = function (order: Order): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_CREATE_SUCCESS,\r\n        payload: order,\r\n    };\r\n};\r\n\r\nconst orderCrerateFailed = function (error: string): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_CREATE_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst orderDetailsRequest = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_REQUEST,\r\n    };\r\n};\r\n\r\nconst orderDetailsSuccess = function (order: Order): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_SUCCESS,\r\n        payload: order,\r\n    };\r\n};\r\n\r\nconst orderDetailsFailed = function (error: string): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst orderPayRequest = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_REQUEST,\r\n    };\r\n};\r\n\r\nconst orderPaySuccess = function (paymentResult: any): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_SUCCESS,\r\n        payload: paymentResult,\r\n    };\r\n};\r\n\r\nconst orderPayFailed = function (error: string): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_DETAILS_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nexport const orderClearLast = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_CLEAR_LAST,\r\n    };\r\n};\r\n\r\nexport const orderPayReset = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_PAY_RESET,\r\n    };\r\n};\r\n\r\nexport const orderReset = function (): OrderActions {\r\n    return {\r\n        type: OrderActionTypes.ORDER_RESET,\r\n    };\r\n};\r\n\r\n/**\r\n * * Async actions\r\n */\r\nexport const asyncGetOrders = () => async (\r\n    dispatch: Dispatch<OrderActions>\r\n) => {\r\n    try {\r\n        dispatch(orderListRequest());\r\n\r\n        const { data } = await OrderService.getOrders();\r\n\r\n        if (data) {\r\n            dispatch(orderListSuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            orderListFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncOrderCreate = (order: OrderCreate) => async (\r\n    dispatch: Dispatch<OrderActions>\r\n) => {\r\n    try {\r\n        dispatch(orderCrerateRequest());\r\n\r\n        const { data } = await OrderService.createOrder(order);\r\n\r\n        if (data) {\r\n            dispatch(orderCrerateSuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            orderCrerateFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncGetOrder = (id: string) => async (\r\n    dispatch: Dispatch<OrderActions>\r\n) => {\r\n    try {\r\n        dispatch(orderDetailsRequest());\r\n\r\n        const { data } = await OrderService.getOrderDetails(id);\r\n\r\n        if (data) {\r\n            dispatch(orderDetailsSuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            orderDetailsFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncOrderPay = (id: string, paymentResult: any) => async (\r\n    dispatch: Dispatch<OrderActions>\r\n) => {\r\n    try {\r\n        dispatch(orderPayRequest());\r\n\r\n        const { data } = await OrderService.orderPay(id, paymentResult);\r\n\r\n        if (data) {\r\n            dispatch(orderPaySuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            orderPayFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncOrderReset = () => async (\r\n    dispatch: Dispatch<OrderActions>\r\n) => {\r\n    try {\r\n        dispatch(orderReset());\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n/**\r\n * * Reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\n\r\ninterface OrderPayProcess {\r\n    loading: boolean;\r\n    success: boolean;\r\n    error: string | null;\r\n}\r\n\r\nexport interface OrderState {\r\n    orders: OrderListItem[];\r\n    lastOrder: Order | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n    orderPay: OrderPayProcess;\r\n}\r\n\r\nconst orderState: OrderState = {\r\n    orders: [],\r\n    lastOrder: null,\r\n    orderPay: {\r\n        loading: false,\r\n        success: false,\r\n        error: null,\r\n    },\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nexport const orderReducer = (\r\n    state: OrderState = orderState,\r\n    action: OrderActions\r\n): OrderState => {\r\n    debugger;\r\n    switch (action.type) {\r\n        case OrderActionTypes.ORDER_CREATE_REQUEST:\r\n        case OrderActionTypes.ORDER_DETAILS_REQUEST:\r\n        case OrderActionTypes.ORDER_LIST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        }\r\n        case OrderActionTypes.ORDER_LIST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                orders: action.payload,\r\n            };\r\n        }\r\n        case OrderActionTypes.ORDER_CREATE_FAILED:\r\n        case OrderActionTypes.ORDER_DETAILS_FAILED:\r\n        case OrderActionTypes.ORDER_LIST_FAILED: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        }\r\n        case OrderActionTypes.ORDER_CREATE_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                lastOrder: action.payload,\r\n                // orders: [...state.orders, action.payload],\r\n            };\r\n        }\r\n        case OrderActionTypes.ORDER_DETAILS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                lastOrder: action.payload,\r\n            };\r\n        case OrderActionTypes.ORDER_PAY_REQUEST:\r\n            return {\r\n                ...state,\r\n                orderPay: {\r\n                    ...state.orderPay,\r\n                    loading: true,\r\n                },\r\n            };\r\n        case OrderActionTypes.ORDER_PAY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                lastOrder: action.payload,\r\n                orderPay: {\r\n                    ...state.orderPay,\r\n                    success: true,\r\n                    loading: false,\r\n                },\r\n            };\r\n        case OrderActionTypes.ORDER_PAY_FAILED:\r\n            return {\r\n                ...state,\r\n                orderPay: {\r\n                    ...state.orderPay,\r\n                    error: action.payload,\r\n                    loading: false,\r\n                },\r\n            };\r\n        case OrderActionTypes.ORDER_PAY_RESET:\r\n            return {\r\n                ...state,\r\n                orderPay: { loading: false, success: false, error: null },\r\n            };\r\n        case OrderActionTypes.ORDER_CLEAR_LAST:\r\n            return {\r\n                ...state,\r\n                lastOrder: null,\r\n            };\r\n        case OrderActionTypes.ORDER_RESET:\r\n            return orderState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n    UserSignInRequest,\r\n    User,\r\n    UserSignUpRequest,\r\n    UserPersonalUpdateRequest,\r\n    ShippingAddress,\r\n} from '../../types';\r\n\r\nimport { StoreRootState } from '../index';\r\nimport { asyncCartReset } from '../cart';\r\nimport { asyncOrderReset } from '../order';\r\n\r\n// Utils\r\nimport { history } from '../../utils/history';\r\n\r\n// Services\r\nimport { AuthService } from '../../services/userService';\r\n\r\n/**\r\n * * Actions\r\n */\r\n\r\nenum UserActionTypes {\r\n    SIGNIN_REQUEST = 'SIGNIN_REQUEST',\r\n    SIGNIN_SUCCESS = 'SIGNIN_SUCCESS',\r\n    SIGNIN_FAILED = 'SIGNIN_FAILED',\r\n\r\n    SIGNUP_REQUEST = 'SIGNUP_REQUEST',\r\n    SIGNUP_FAILED = 'SIGNUP_FAILED',\r\n\r\n    USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST',\r\n    USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS',\r\n    USER_DETAILS_FAILED = 'USER_DETAILS_FAILED',\r\n\r\n    USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST',\r\n    USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS',\r\n    USER_UPDATE_FAILED = 'USER_UPDATE_FAILED',\r\n\r\n    USER_SIGNOUT = 'USER_SIGNOUT',\r\n    CLEAR_ERROR = 'CLEAR_ERROR',\r\n}\r\n\r\ninterface SignInRequestAction {\r\n    type: UserActionTypes.SIGNIN_REQUEST;\r\n}\r\n\r\ninterface SignInSuccessAction {\r\n    type: UserActionTypes.SIGNIN_SUCCESS;\r\n    payload: User;\r\n}\r\n\r\ninterface SignInFailedAction {\r\n    type: UserActionTypes.SIGNIN_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface SignUpRequestAction {\r\n    type: UserActionTypes.SIGNUP_REQUEST;\r\n}\r\n\r\ninterface SignUpFailedAction {\r\n    type: UserActionTypes.SIGNUP_FAILED;\r\n    payload: string;\r\n}\r\n\r\ninterface SignOutUserAction {\r\n    type: UserActionTypes.USER_SIGNOUT;\r\n}\r\n\r\ninterface ClearErrorAction {\r\n    type: UserActionTypes.CLEAR_ERROR;\r\n}\r\n\r\ninterface UserPersonalUpdateRequestAction {\r\n    type: UserActionTypes.USER_UPDATE_REQUEST;\r\n}\r\n\r\ninterface UserUpdateSuccessAction {\r\n    type: UserActionTypes.USER_UPDATE_SUCCESS;\r\n    payload: User;\r\n}\r\n\r\ninterface UserUpdateFailedAction {\r\n    type: UserActionTypes.USER_UPDATE_FAILED;\r\n    payload: string;\r\n}\r\n\r\ntype UserActions =\r\n    | SignInRequestAction\r\n    | SignInSuccessAction\r\n    | SignInFailedAction\r\n    | UserPersonalUpdateRequestAction\r\n    | UserUpdateSuccessAction\r\n    | UserUpdateFailedAction\r\n    | SignUpRequestAction\r\n    | SignUpFailedAction\r\n    | SignOutUserAction\r\n    | ClearErrorAction;\r\n\r\nconst signInRequest = function (): UserActions {\r\n    return {\r\n        type: UserActionTypes.SIGNIN_REQUEST,\r\n    };\r\n};\r\n\r\nconst signInSuccess = function (user: User): UserActions {\r\n    return {\r\n        type: UserActionTypes.SIGNIN_SUCCESS,\r\n        payload: user,\r\n    };\r\n};\r\n\r\nconst signInFailed = function (error: string): UserActions {\r\n    return {\r\n        type: UserActionTypes.SIGNIN_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst signUpRequest = function (): UserActions {\r\n    return {\r\n        type: UserActionTypes.SIGNUP_REQUEST,\r\n    };\r\n};\r\n\r\nconst signUpFailed = function (error: string): UserActions {\r\n    return {\r\n        type: UserActionTypes.SIGNUP_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst userPersonalUpdateRequest = function (): UserActions {\r\n    return {\r\n        type: UserActionTypes.USER_UPDATE_REQUEST,\r\n    };\r\n};\r\n\r\nconst userUpdateSuccess = function (user: User): UserActions {\r\n    return {\r\n        type: UserActionTypes.USER_UPDATE_SUCCESS,\r\n        payload: user,\r\n    };\r\n};\r\n\r\nconst userUpdateFailed = function (error: string): UserActions {\r\n    return {\r\n        type: UserActionTypes.USER_UPDATE_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\nconst signOutUser = function (): UserActions {\r\n    return {\r\n        type: UserActionTypes.USER_SIGNOUT,\r\n    };\r\n};\r\n\r\nexport const clearError = function (): ClearErrorAction {\r\n    return {\r\n        type: UserActionTypes.CLEAR_ERROR,\r\n    };\r\n};\r\n\r\n/**\r\n * * Async actions\r\n */\r\n\r\nexport const asyncSignIn = (user: UserSignInRequest) => async (\r\n    dispatch: Dispatch<UserActions>\r\n) => {\r\n    try {\r\n        dispatch(signInRequest());\r\n\r\n        const { data } = await AuthService.signIn(user);\r\n\r\n        if (data) {\r\n            dispatch(signInSuccess(data));\r\n        }\r\n\r\n        localStorage.setItem('user', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch(\r\n            signInFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n// TODO any type and Dispatch asyncAction inside asyncAction\r\nexport const asyncSignUp = (userCreds: UserSignUpRequest) => async (\r\n    dispatch: Dispatch<any>\r\n) => {\r\n    try {\r\n        const { email, password } = userCreds;\r\n\r\n        dispatch(signUpRequest());\r\n\r\n        // Save to DB and if all is OK go forward\r\n        await AuthService.signUp(userCreds);\r\n\r\n        // Use prev User to login\r\n        dispatch(asyncSignIn({ email, password }));\r\n    } catch (error) {\r\n        dispatch(\r\n            signUpFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncSignOut = () => async (dispatch: Dispatch<UserActions>) => {\r\n    // ? Here we can revoke token ?\r\n\r\n    // * Remove user and token from local storage and Redux.\r\n    dispatch(signOutUser());\r\n    localStorage.removeItem('user');\r\n    // * Clean cart and orders from local storage and Redux.\r\n    // @ts-ignore\r\n    dispatch(asyncCartReset());\r\n    // @ts-ignore\r\n    dispatch(asyncOrderReset());\r\n    //await clearCheckoutDataFromStorage();\r\n\r\n    // Now that we're signed out, forget the old (customer) cart.\r\n    // We don't need to create a new cart here because we're going to refresh\r\n    // the page immediately after.\r\n    // await dispatch(removeCart());\r\n};\r\n\r\nexport const asyncUpdateUser = (userCreds: User) => async (\r\n    dispatch: Dispatch<UserActions>,\r\n    getState: () => StoreRootState\r\n) => {\r\n    try {\r\n        dispatch(userPersonalUpdateRequest());\r\n\r\n        const store = getState();\r\n        const {\r\n            user: { currentUser },\r\n        } = store;\r\n\r\n        const { data } = await AuthService.updateUser(\r\n            Object.assign({}, currentUser, userCreds)\r\n        );\r\n\r\n        if (data) {\r\n            const userUpdated = Object.assign({}, currentUser, data);\r\n\r\n            dispatch(userUpdateSuccess(userUpdated));\r\n\r\n            localStorage.setItem('user', JSON.stringify(userUpdated));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            userUpdateFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\nexport const asyncGetUser = () => async (dispatch: Dispatch<UserActions>) => {\r\n    try {\r\n        const { data } = await AuthService.getUser();\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n/**\r\n * * Reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\n\r\nexport interface UserState {\r\n    currentUser: User;\r\n    loading: boolean;\r\n    error: string | null;\r\n    isSignedIn: boolean;\r\n}\r\n\r\nexport const isSignedIn = (): boolean => !!localStorage.getItem('user');\r\n\r\nconst userState: UserState = {\r\n    currentUser: {\r\n        id: '',\r\n        email: '',\r\n        name: '',\r\n        isAdmin: false,\r\n        token: '',\r\n        shippingAddress: {\r\n            city: '',\r\n            address: '',\r\n            country: '',\r\n            postalCode: '',\r\n        },\r\n    },\r\n    loading: false,\r\n    error: '',\r\n    isSignedIn: isSignedIn(),\r\n};\r\n\r\n// TODO Change Token location (from user to more global)\r\n\r\n/**\r\n * * SignIn reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\nexport const userReducer = (\r\n    state: UserState = userState,\r\n    action: UserActions\r\n): UserState => {\r\n    switch (action.type) {\r\n        case UserActionTypes.SIGNIN_REQUEST:\r\n        case UserActionTypes.SIGNUP_REQUEST:\r\n        case UserActionTypes.USER_UPDATE_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case UserActionTypes.SIGNIN_SUCCESS:\r\n        case UserActionTypes.USER_UPDATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n                isSignedIn: true,\r\n                currentUser: Object.assign(\r\n                    {},\r\n                    state.currentUser,\r\n                    action.payload\r\n                ),\r\n            };\r\n\r\n        case UserActionTypes.SIGNIN_FAILED:\r\n        case UserActionTypes.USER_UPDATE_FAILED:\r\n        case UserActionTypes.SIGNUP_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        case UserActionTypes.USER_SIGNOUT:\r\n            return {\r\n                ...state,\r\n                currentUser: {} as User,\r\n                loading: false,\r\n                error: null,\r\n                isSignedIn: false,\r\n            };\r\n        case UserActionTypes.CLEAR_ERROR:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import axios, { AxiosPromise } from 'axios';\r\nimport { axiosInstance } from './axiosInstance';\r\n\r\nimport {\r\n    User,\r\n    UserSignInRequest,\r\n    UserSignUpRequest,\r\n    UserPersonalUpdateRequest,\r\n} from '../types';\r\n\r\ninterface AuthService {\r\n    signIn(user: UserSignInRequest): AxiosPromise<User>;\r\n    signUp(user: UserSignUpRequest): AxiosPromise<User>;\r\n    updateUser(user: UserPersonalUpdateRequest): AxiosPromise<User>;\r\n    getUser(): AxiosPromise<User>;\r\n}\r\n\r\nexport const AuthService: AuthService = {\r\n    signIn,\r\n    signUp,\r\n    getUser,\r\n    updateUser,\r\n};\r\n\r\nfunction signIn(user: UserSignInRequest) {\r\n    return axiosInstance.post<User>(`/users/signin`, user);\r\n}\r\n\r\nfunction signUp(user: UserSignUpRequest) {\r\n    return axiosInstance.post<User>(`/users`, user);\r\n}\r\n\r\nfunction getUser() {\r\n    return axiosInstance.get<User>(`/users/user`);\r\n}\r\n\r\nfunction updateUser(user: User) {\r\n    return axiosInstance.put<User>(`/users/user`, {\r\n        updateUser: user,\r\n    });\r\n}\r\n","/**\r\n * Returns whether the given object is empty ({}).\r\n *\r\n * @param obj\r\n */\r\nexport function isObjectEmpty(obj: object) {\r\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\r\n}\r\n\r\nexport function isObjectEmptyByValues(obj: object): boolean {\r\n    if (isObjectEmpty(obj)) return false;\r\n    return (\r\n        Object.values(obj).filter((x) => x !== '' && x !== undefined).length ===\r\n        0\r\n    );\r\n}\r\n\r\nexport function isObjectFull(obj: object): boolean {\r\n    if (isObjectEmpty(obj)) return false;\r\n    const objLength = Object.keys(obj).length;\r\n\r\n    return (\r\n        Object.values(obj).filter(\r\n            (x) => x !== '' && x !== undefined && x !== null\r\n        ).length === objLength\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AppRoutes } from '../../config';\r\n\r\nimport { StoreRootState } from '../../store';\r\nimport { asyncSignOut } from '../../store/user';\r\n\r\nimport { isObjectEmpty } from '../../utils/isObjectEmpty';\r\n\r\nexport const Header = (): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { isSignedIn, currentUser } = useSelector(\r\n        (state: StoreRootState) => state.user\r\n    );\r\n\r\n    // Todo\r\n    const [state, setstate] = useState<string | null>(null);\r\n\r\n    const onSignOut = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        dispatch(asyncSignOut());\r\n        history.push(AppRoutes.HOME);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n                <Container>\r\n                    <LinkContainer to={AppRoutes.HOME}>\r\n                        <Navbar.Brand>Ecommerce</Navbar.Brand>\r\n                    </LinkContainer>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <LinkContainer to={AppRoutes.CART}>\r\n                                <Nav.Link>\r\n                                    <i className=\"fas fa-shopping-cart\"></i>{' '}\r\n                                    Cart\r\n                                </Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            {isSignedIn && !isObjectEmpty(currentUser) ? (\r\n                                <NavDropdown\r\n                                    title=\"Dropdown\"\r\n                                    id=\"basic-nav-dropdown\"\r\n                                >\r\n                                    <LinkContainer to={AppRoutes.PROFILE}>\r\n                                        <NavDropdown.Item>\r\n                                            <i className=\"fas fa-user\"></i>{' '}\r\n                                            {currentUser.name}\r\n                                        </NavDropdown.Item>\r\n                                    </LinkContainer>\r\n                                    <NavDropdown.Item onClick={onSignOut}>\r\n                                        Sign Out\r\n                                    </NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            ) : (\r\n                                <LinkContainer to={AppRoutes.SIGNIN}>\r\n                                    <Nav.Link>\r\n                                        <i className=\"fas fa-user\"></i> Sign In\r\n                                    </Nav.Link>\r\n                                </LinkContainer>\r\n                            )}\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nfunction simpleHOC(WrappedComponent: any) {\r\n    // And return a new anonymous component\r\n    return class ASD extends React.Component {\r\n        render() {\r\n            return <WrappedComponent {...this.props} />;\r\n        }\r\n    };\r\n}\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Col className=\"text-center\">Copyright</Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default simpleHOC(Footer);\r\n","import React, { CSSProperties } from 'react';\r\n\r\ninterface RatingProps {\r\n    value: number;\r\n    text?: string;\r\n    color?: string;\r\n    reviewsStyle?: CSSProperties;\r\n}\r\n\r\nexport const Rating: React.FC<RatingProps> = ({\r\n    value,\r\n    text,\r\n    color,\r\n    reviewsStyle,\r\n}: RatingProps): JSX.Element => {\r\n    return (\r\n        <div className=\"rating\">\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 1\r\n                            ? 'fas fa-star'\r\n                            : value >= 0.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 2\r\n                            ? 'fas fa-star'\r\n                            : value >= 1.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 3\r\n                            ? 'fas fa-star'\r\n                            : value >= 2.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 4\r\n                            ? 'fas fa-star'\r\n                            : value >= 3.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span>\r\n                <i\r\n                    style={{ color }}\r\n                    className={\r\n                        value >= 5\r\n                            ? 'fas fa-star'\r\n                            : value >= 4.5\r\n                            ? 'fas fa-star-half-alt'\r\n                            : 'far fa-star'\r\n                    }\r\n                ></i>\r\n            </span>\r\n            <span style={reviewsStyle}>{text}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nRating.defaultProps = {\r\n    color: '#ffcf33',\r\n    reviewsStyle: {\r\n        marginLeft: '5px',\r\n    },\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport moduleName from 'react-router';\r\nimport { Rating } from '../Rating';\r\n\r\nimport { Product } from '../../types';\r\n\r\ninterface ProductProps {\r\n    product: Product;\r\n}\r\n\r\nexport const ProductCard: React.FunctionComponent<ProductProps> = ({\r\n    product,\r\n}: ProductProps) => {\r\n    const { _id, name, category, price, image, rating, numReviews } = product;\r\n\r\n    return (\r\n        <Link to={`/product/${_id}`}>\r\n            <Card className=\"my-3 p-3 rounded\" style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={image} />\r\n                <Card.Body>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text>{category}</Card.Text>\r\n                    <Card.Text>{price}</Card.Text>\r\n                    <Rating value={rating} text={`${numReviews} reviews`} />\r\n                </Card.Body>\r\n            </Card>\r\n        </Link>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const Loader = (): JSX.Element => {\r\n    return (\r\n        <Spinner\r\n            animation=\"border\"\r\n            role=\"status\"\r\n            style={{\r\n                width: '100px',\r\n                height: '100px',\r\n                display: 'block',\r\n                margin: 'auto',\r\n            }}\r\n        >\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\ninterface MessageProps {\r\n    variant?: string;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = ({\r\n    variant = 'info',\r\n    children,\r\n}: MessageProps): JSX.Element => {\r\n    return <Alert variant={variant}>{children}</Alert>;\r\n};\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info',\r\n};\r\n","import axios, { AxiosPromise } from 'axios';\r\nimport { axiosInstance } from './axiosInstance';\r\nimport { Product } from '../types';\r\n\r\ninterface ProductService {\r\n    getProducts(): AxiosPromise<Product[]>;\r\n    getProductById(id: string): AxiosPromise<Product>;\r\n}\r\n\r\nexport const ProductService: ProductService = {\r\n    getProducts,\r\n    getProductById,\r\n};\r\n\r\nfunction getProducts() {\r\n    return axiosInstance.get<Product[]>('/products');\r\n}\r\n\r\nfunction getProductById(id: string) {\r\n    return axiosInstance.get<Product>(`/products/${id}`);\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { Product } from '../../types/index';\r\n\r\n// Services\r\nimport { ProductService } from '../../services/productService';\r\n\r\n/**\r\n * * Actions\r\n */\r\n\r\nenum ProductActionTypes {\r\n    PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST',\r\n    PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS',\r\n    PRODUCT_LIST_FAILED = 'PRODUCT_LIST_FAILED',\r\n}\r\n\r\ninterface ProductsRequest {\r\n    type: ProductActionTypes.PRODUCT_LIST_REQUEST;\r\n}\r\n\r\ninterface ProductsSuccess {\r\n    type: ProductActionTypes.PRODUCT_LIST_SUCCESS;\r\n    payload: Product[];\r\n}\r\n\r\ninterface ProductsFailed {\r\n    type: ProductActionTypes.PRODUCT_LIST_FAILED;\r\n    payload: string;\r\n}\r\n\r\ntype ProductActions = ProductsRequest | ProductsSuccess | ProductsFailed;\r\n\r\nconst productsRequest = function (): ProductActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_LIST_REQUEST,\r\n    };\r\n};\r\n\r\nconst productsSuccess = function (products: Product[]): ProductActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_LIST_SUCCESS,\r\n        payload: products,\r\n    };\r\n};\r\n\r\nconst productsFailed = function (error: string): ProductActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_LIST_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\n/**\r\n * * Async actions\r\n */\r\n\r\nexport const asyncGetProducts = () => async (\r\n    dispatch: Dispatch<ProductActions>\r\n) => {\r\n    try {\r\n        dispatch(productsRequest());\r\n\r\n        const { data } = await ProductService.getProducts();\r\n\r\n        if (data) {\r\n            dispatch(productsSuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            productsFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n/**\r\n * * Reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\n\r\nexport interface ProductsState {\r\n    products: Product[];\r\n    loading: boolean;\r\n    error?: string | null;\r\n}\r\n\r\nconst productState: ProductsState = {\r\n    products: [],\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nexport const productListReducer = (\r\n    state: ProductsState = productState,\r\n    action: ProductActions\r\n): ProductsState => {\r\n    switch (action.type) {\r\n        case ProductActionTypes.PRODUCT_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case ProductActionTypes.PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                products: action.payload,\r\n            };\r\n        case ProductActionTypes.PRODUCT_LIST_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport axios from 'axios';\r\nimport { Product } from '../../types/index';\r\n\r\n// Services\r\nimport { ProductService } from '../../services/productService';\r\n\r\n/**\r\n * * Actions\r\n */\r\n\r\nenum ProductActionTypes {\r\n    PRODUCT_DETAIL_REQUEST = 'PRODUCT_DETAIL_REQUEST',\r\n    PRODUCT_DETAIL_SUCCESS = 'PRODUCT_DETAIL_SUCCESS',\r\n    PRODUCT_DETAIL_FAILED = 'PRODUCT_DETAIL_FAILED',\r\n}\r\n\r\ninterface ProductDetailRequest {\r\n    type: ProductActionTypes.PRODUCT_DETAIL_REQUEST;\r\n}\r\n\r\ninterface ProductDetailSuccess {\r\n    type: ProductActionTypes.PRODUCT_DETAIL_SUCCESS;\r\n    payload: Product;\r\n}\r\n\r\ninterface ProductDetailFailed {\r\n    type: ProductActionTypes.PRODUCT_DETAIL_FAILED;\r\n    payload: string;\r\n}\r\n\r\ntype ProductDetailActions =\r\n    | ProductDetailRequest\r\n    | ProductDetailSuccess\r\n    | ProductDetailFailed;\r\n\r\nconst productRequest = function (): ProductDetailActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_DETAIL_REQUEST,\r\n    };\r\n};\r\n\r\nconst productSuccess = function (product: Product): ProductDetailActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_DETAIL_SUCCESS,\r\n        payload: product,\r\n    };\r\n};\r\n\r\nconst productFailed = function (error: string): ProductDetailActions {\r\n    return {\r\n        type: ProductActionTypes.PRODUCT_DETAIL_FAILED,\r\n        payload: error,\r\n    };\r\n};\r\n\r\n/**\r\n * * Async actions\r\n */\r\n\r\nexport const asyncGetProduct = (id: string) => async (\r\n    dispatch: Dispatch<ProductDetailActions>\r\n) => {\r\n    try {\r\n        dispatch(productRequest());\r\n\r\n        const { data } = await ProductService.getProductById(id);\r\n\r\n        if (data) {\r\n            dispatch(productSuccess(data));\r\n        }\r\n    } catch (error) {\r\n        dispatch(\r\n            productFailed(\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n            )\r\n        );\r\n        console.error(error.message);\r\n    }\r\n};\r\n\r\n/**\r\n * * Reducer\r\n *\r\n * @param state\r\n * @param action\r\n */\r\n\r\nexport interface ProductDetailState {\r\n    product: Product;\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\nconst productState: ProductDetailState = {\r\n    product: {} as Product,\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nexport const productDetailReducer = (\r\n    state: ProductDetailState = productState,\r\n    action: ProductDetailActions\r\n): ProductDetailState => {\r\n    switch (action.type) {\r\n        case ProductActionTypes.PRODUCT_DETAIL_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case ProductActionTypes.PRODUCT_DETAIL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                product: Object.assign({}, action.payload),\r\n            };\r\n        case ProductActionTypes.PRODUCT_DETAIL_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Product } from '../types';\r\nimport { ProductCard } from '../components/ProductCard';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Loader } from '../components/Loader';\r\nimport { Message } from '../components/Message';\r\n\r\nimport { StoreRootState } from '../store';\r\nimport { asyncGetProducts } from '../store/productList';\r\n\r\nexport const HomePage = () => {\r\n    const dispatch = useDispatch();\r\n    const { loading, error, products } = useSelector(\r\n        (state: StoreRootState) => state.products\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncGetProducts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                {loading ? (\r\n                    <Loader />\r\n                ) : error ? (\r\n                    <Message variant=\"danger\">\r\n                        <span>{error}</span>\r\n                    </Message>\r\n                ) : (\r\n                    products.map((product: Product) => {\r\n                        return (\r\n                            <Col key={product._id} sm={4}>\r\n                                <ProductCard product={product} />\r\n                            </Col>\r\n                        );\r\n                    })\r\n                )}\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n","export function makeQtySelect(qty: number): number[] {\r\n    const qtyArray = [];\r\n\r\n    for (let i = 1; i <= qty; i++) {\r\n        qtyArray.push(i);\r\n    }\r\n\r\n    return [...qtyArray];\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ListGroup, Button, Form, Row, Col, Image } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\r\nimport { Rating } from '../components/Rating';\r\nimport { Loader } from '../components/Loader';\r\nimport { Message } from '../components/Message';\r\n\r\nimport { asyncGetProduct } from '../store/productDetail';\r\nimport { StoreRootState } from '../store';\r\n\r\nimport { makeQtySelect } from '../utils/makeQtySelect';\r\n\r\ninterface ProductPageParams {\r\n    id: string;\r\n}\r\n\r\nexport const ProductPage = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [qtyArray, setQtyArray] = useState<number[]>([]);\r\n    const [qty, setQty] = useState<number>(1);\r\n    const { id } = useParams<ProductPageParams>();\r\n    const { product, loading, error } = useSelector(\r\n        (state: StoreRootState) => state.productDetail\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncGetProduct(id));\r\n    }, [dispatch]);\r\n\r\n    const {\r\n        price,\r\n        name,\r\n        rating,\r\n        numReviews,\r\n        description,\r\n        image,\r\n        countInStock,\r\n    } = product;\r\n\r\n    const addToCartHandler = (event: any) => {\r\n        event.preventDefault();\r\n        history.push(`/cart/${id}?qty=${qty}`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (countInStock) {\r\n            setQtyArray(makeQtySelect(countInStock));\r\n        }\r\n    }, [countInStock]);\r\n\r\n    if (!product) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                {loading ? (\r\n                    <Loader />\r\n                ) : error ? (\r\n                    <Message variant=\"danger\">\r\n                        <span>{error}</span>\r\n                    </Message>\r\n                ) : (\r\n                    <>\r\n                        <Col sm={6}>\r\n                            <Image src={image} fluid />\r\n                        </Col>\r\n                        <Col sm={6}>\r\n                            <ListGroup variant=\"flush\">\r\n                                <ListGroup.Item>\r\n                                    <h3>{name}</h3>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Rating\r\n                                        value={rating}\r\n                                        text={`${numReviews} reviews`}\r\n                                        reviewsStyle={{ marginLeft: '10px' }}\r\n                                    />\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <strong>Price: ${price}</strong>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>{description}</ListGroup.Item>\r\n                                {countInStock > 0 ? (\r\n                                    <ListGroup.Item>\r\n                                        <Form.Group>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                onChange={(event) =>\r\n                                                    setQty(\r\n                                                        parseInt(\r\n                                                            event.target.value\r\n                                                        )\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                {qtyArray.map(\r\n                                                    (\r\n                                                        qty: number\r\n                                                    ): JSX.Element => {\r\n                                                        return (\r\n                                                            <option\r\n                                                                key={qty}\r\n                                                                value={qty}\r\n                                                            >\r\n                                                                {qty}\r\n                                                            </option>\r\n                                                        );\r\n                                                    }\r\n                                                )}\r\n                                            </Form.Control>\r\n                                            <Button\r\n                                                variant=\"primary\"\r\n                                                onClick={addToCartHandler}\r\n                                            >\r\n                                                Primary\r\n                                            </Button>{' '}\r\n                                        </Form.Group>\r\n                                    </ListGroup.Item>\r\n                                ) : (\r\n                                    <Message variant=\"danger\">\r\n                                        <span>Out of stock</span>\r\n                                    </Message>\r\n                                )}\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </>\r\n                )}\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useParams, Link, useHistory } from 'react-router-dom';\r\n\r\nimport { asyncAddCartProduct, asyncRemoveCartProduct } from '../store/cart';\r\nimport { asyncSignIn, asyncGetUser } from '../store/user';\r\nimport { CartProduct } from '../types';\r\nimport { StoreRootState } from '../store';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    ListGroup,\r\n    Image,\r\n    Form,\r\n    Button,\r\n    Card,\r\n} from 'react-bootstrap';\r\n\r\nimport { Message } from '../components/Message';\r\nimport { AppRoutes } from '../config';\r\nimport { makeQtySelect } from '../utils/makeQtySelect';\r\n\r\nfunction getProductTotalCount(products: CartProduct[]): number {\r\n    return products.reduce((acc, product: CartProduct) => acc + product.qty, 0);\r\n}\r\n\r\nfunction getProductTotalPrice(products: CartProduct[]): string {\r\n    return products\r\n        .reduce(\r\n            (acc, product: CartProduct) => acc + product.qty * product.price,\r\n            0\r\n        )\r\n        .toFixed(2);\r\n}\r\n\r\nexport const CartPage = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { id } = useParams<{ id: string }>();\r\n    const { search } = useLocation<{ qty: string }>();\r\n    const qty: number = parseInt(search.split('=')[1]);\r\n    const { isSignedIn } = useSelector((state: StoreRootState) => state.user);\r\n\r\n    const { cartItems } = useSelector((state: StoreRootState) => state.cart);\r\n\r\n    useEffect(() => {\r\n        if (id && qty) {\r\n            dispatch(asyncAddCartProduct(id, qty));\r\n        }\r\n    }, [dispatch, id, qty]);\r\n\r\n    const onCheckoutHandler = () => {\r\n        const route = isSignedIn\r\n            ? AppRoutes.SHIPPING\r\n            : `${AppRoutes.SIGNIN}?redirect=shipping`;\r\n        history.push(route);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {cartItems.length === 0 ? (\r\n                <Message>\r\n                    <span>Cart is empty</span>\r\n                </Message>\r\n            ) : (\r\n                <Row>\r\n                    <Col sm={8}>\r\n                        <ListGroup variant=\"flush\">\r\n                            {cartItems.map((product: CartProduct) => {\r\n                                return (\r\n                                    <ListGroup.Item key={product.id}>\r\n                                        <Row>\r\n                                            <Col sm={3}>\r\n                                                <Image\r\n                                                    fluid\r\n                                                    src={product.image}\r\n                                                    alt={product.name}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col sm={3}>\r\n                                                <Link\r\n                                                    to={`${AppRoutes.PRODUCT}/${product.id}`}\r\n                                                >\r\n                                                    {product.name}\r\n                                                </Link>\r\n                                            </Col>\r\n                                            <Col sm={2}>{product.price}</Col>\r\n                                            <Col sm={2}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    value={product.qty}\r\n                                                    onChange={(event) =>\r\n                                                        dispatch(\r\n                                                            asyncAddCartProduct(\r\n                                                                product.id,\r\n                                                                parseInt(\r\n                                                                    event.target\r\n                                                                        .value\r\n                                                                )\r\n                                                            )\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    {makeQtySelect(\r\n                                                        product.countInStock\r\n                                                    ).map(\r\n                                                        (\r\n                                                            qty: number\r\n                                                        ): JSX.Element => {\r\n                                                            return (\r\n                                                                <option\r\n                                                                    key={qty}\r\n                                                                    value={qty}\r\n                                                                >\r\n                                                                    {qty}\r\n                                                                </option>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                            <Col sm={2}>\r\n                                                <Button\r\n                                                    variant=\"light\"\r\n                                                    type=\"button\"\r\n                                                    onClick={() =>\r\n                                                        dispatch(\r\n                                                            asyncRemoveCartProduct(\r\n                                                                product.id\r\n                                                            )\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    <i className=\"fas fa-trash\"></i>\r\n                                                </Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                );\r\n                            })}\r\n                        </ListGroup>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    Subtotal {getProductTotalCount(cartItems)}\r\n                                </Card.Title>\r\n                                <Card.Subtitle className=\"mb-2 text-muted\">\r\n                                    Total price{' $'}\r\n                                    {getProductTotalPrice(cartItems)}\r\n                                </Card.Subtitle>\r\n                                <Button\r\n                                    onClick={onCheckoutHandler}\r\n                                    variant=\"secondary\"\r\n                                    size=\"lg\"\r\n                                    block\r\n                                >\r\n                                    Proceed to checkout\r\n                                </Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { StoreRootState } from '../../store';\r\n\r\nimport { clearError } from '../../store/user';\r\n\r\ninterface FormContainerProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const FormContainer: React.FC<FormContainerProps> = ({\r\n    children,\r\n}: FormContainerProps) => {\r\n    const dispatch = useDispatch();\r\n    const { error } = useSelector((state: StoreRootState) => state.user);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setTimeout(() => {\r\n                dispatch(clearError());\r\n            }, 5000);\r\n        }\r\n    }, [error]);\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    {children}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Message } from '../components/Message';\r\nimport { Loader } from '../components/Loader';\r\nimport { FormContainer } from '../components/FormContainer';\r\n\r\nimport { asyncSignIn } from '../store/user';\r\nimport { StoreRootState } from '../store';\r\n\r\nimport { isObjectEmpty } from '../utils/isObjectEmpty';\r\n\r\nexport const SignInPage = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { currentUser, isSignedIn, loading, error } = useSelector(\r\n        (state: StoreRootState) => state.user\r\n    );\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const { search } = useLocation();\r\n\r\n    const redirect: string = search ? search.split('=')[1] : '/';\r\n\r\n    const onSubmitForm = (event: React.FormEvent<HTMLFontElement>) => {\r\n        event.preventDefault();\r\n        dispatch(asyncSignIn({ email, password }));\r\n    };\r\n\r\n    const redirectPageAfterSignIn = () => {\r\n        if (isSignedIn) {\r\n            history.push(redirect);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        redirectPageAfterSignIn();\r\n    }, [isSignedIn]);\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {error && (\r\n                <Message variant=\"danger\">\r\n                    <span>{error}</span>\r\n                </Message>\r\n            )}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={onSubmitForm}>\r\n                <Form.Group>\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        value={email}\r\n                        placeholder=\"Enter email\"\r\n                        onChange={(event) => setEmail(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        value={password}\r\n                        placeholder=\"Enter password\"\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Button type=\"submit\">Sign in</Button>\r\n            </Form>\r\n\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    New customer?{' '}\r\n                    <Link\r\n                        to={\r\n                            redirect\r\n                                ? `/signup?redirect=${redirect}`\r\n                                : '/signup'\r\n                        }\r\n                    >\r\n                        Sign up\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Message } from '../components/Message';\r\nimport { Loader } from '../components/Loader';\r\nimport { FormContainer } from '../components/FormContainer';\r\n\r\nimport { asyncSignUp } from '../store/user';\r\nimport { StoreRootState } from '../store';\r\n\r\nimport { isObjectEmpty } from '../utils/isObjectEmpty';\r\n\r\nexport const SignUpPage = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { isSignedIn, loading, error } = useSelector(\r\n        (state: StoreRootState) => state.user\r\n    );\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [message, setMessage] = useState<string | null>(null);\r\n\r\n    const { search } = useLocation();\r\n    const redirect: string = search ? search.split('=')[1] : '/';\r\n\r\n    const onSubmitForm = (event: React.FormEvent<HTMLFontElement>) => {\r\n        event.preventDefault();\r\n        dispatch(asyncSignUp({ name, email, password }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isSignedIn) {\r\n            history.push(redirect);\r\n        }\r\n    }, [isSignedIn]);\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign Up</h1>\r\n            {error && (\r\n                <Message variant=\"danger\">\r\n                    <span>{error}</span>\r\n                </Message>\r\n            )}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={onSubmitForm}>\r\n                <Form.Group>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={name}\r\n                        placeholder=\"Enter name\"\r\n                        onChange={(event) => setName(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"email\"\r\n                        value={email}\r\n                        placeholder=\"Enter email\"\r\n                        onChange={(event) => setEmail(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        value={password}\r\n                        placeholder=\"Enter password\"\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type=\"submit\">Sign Up</Button>\r\n            </Form>\r\n\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    Have a account?{' '}\r\n                    <Link\r\n                        to={\r\n                            redirect\r\n                                ? `/signin?redirect=${redirect}`\r\n                                : '/signin'\r\n                        }\r\n                    >\r\n                        Sign in\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { StoreRootState } from '../store';\r\nimport { asyncUpdateUser } from '../store/user';\r\nimport { Message } from '../components/Message';\r\nimport { OrderListItem, User } from '../types';\r\nimport { asyncGetOrders } from '../store/order';\r\nimport { Loader } from '../components/Loader';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { AppRoutes } from '../config';\r\n\r\nexport const UserPage = () => {\r\n    const dispatch = useDispatch();\r\n    const { currentUser, isSignedIn } = useSelector(\r\n        (state: StoreRootState) => state.user\r\n    );\r\n    const { orders, loading, error } = useSelector(\r\n        (state: StoreRootState) => state.order\r\n    );\r\n\r\n    const [name, setName] = useState(currentUser.name);\r\n    const [email, setEmail] = useState(currentUser.email);\r\n    const [password, setPassword] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncGetOrders());\r\n    }, []);\r\n\r\n    const onSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(\r\n            asyncUpdateUser({\r\n                email,\r\n                name,\r\n                password,\r\n            } as User)\r\n        );\r\n\r\n        setPassword('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>User Info</h2>\r\n            <Row>\r\n                <Col xs={12} sm={12} md={6}>\r\n                    <Form onSubmit={onSubmitHandler}>\r\n                        <Form.Group controlId=\"name\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                value={name}\r\n                                onChange={(event) =>\r\n                                    setName(event.target.value)\r\n                                }\r\n                                type=\"name\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"email\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control\r\n                                value={email}\r\n                                onChange={(event) =>\r\n                                    setEmail(event.target.value)\r\n                                }\r\n                                type=\"email\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control\r\n                                onChange={(event) =>\r\n                                    setPassword(event.target.value)\r\n                                }\r\n                                value={password}\r\n                                type=\"password\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n\r\n            <h2>My Orders</h2>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant=\"danger\">{error}</Message>\r\n            ) : orders.length === 0 ? (\r\n                <Message variant=\"danger\">You do not have orders</Message>\r\n            ) : (\r\n                <Table striped bordered hover responsive className=\"table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Date</th>\r\n                            <th>TOTAL</th>\r\n                            <th>PAID</th>\r\n                            <th>DELIVERED</th>\r\n                            <th>ID</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {orders.map((order: OrderListItem, index: number) => {\r\n                            return (\r\n                                <tr key={order._id}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td>{order.createdAt.substring(0, 10)}</td>\r\n                                    <td>{order.totalPrice}</td>\r\n                                    <td>\r\n                                        {order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"fas fa-times\"\r\n                                                style={{ color: 'red' }}\r\n                                            ></i>\r\n                                        )}\r\n                                    </td>\r\n                                    <td>\r\n                                        {order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"fas fa-times\"\r\n                                                style={{ color: 'red' }}\r\n                                            ></i>\r\n                                        )}\r\n                                    </td>\r\n                                    <td>\r\n                                        <LinkContainer\r\n                                            to={`${AppRoutes.ORDER_DETAILS}/${order._id}`}\r\n                                        >\r\n                                            <Button>Details</Button>\r\n                                        </LinkContainer>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nimport { StoreRootState } from '../../store';\r\n\r\nimport { AppRoutes } from '../../config';\r\n\r\ninterface CheckoutStepsProps {\r\n    step1?: boolean;\r\n    step2?: boolean;\r\n    step3?: boolean;\r\n}\r\n\r\nexport const CheckoutSteps: React.FC<CheckoutStepsProps> = ({\r\n    step1 = false,\r\n    step2 = false,\r\n    step3 = false,\r\n}: CheckoutStepsProps): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const { isSignedIn, currentUser } = useSelector(\r\n        (state: StoreRootState) => state.user\r\n    );\r\n\r\n    return (\r\n        <Nav>\r\n            <Nav.Item>\r\n                {step1 ? (\r\n                    <LinkContainer to={AppRoutes.SHIPPING}>\r\n                        <Nav.Link>Shipping</Nav.Link>\r\n                    </LinkContainer>\r\n                ) : (\r\n                    <Nav.Link disabled>Shipping</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step2 ? (\r\n                    <LinkContainer to={AppRoutes.PAYMENT}>\r\n                        <Nav.Link>Payment</Nav.Link>\r\n                    </LinkContainer>\r\n                ) : (\r\n                    <Nav.Link disabled>Payment</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n\r\n            <Nav.Item>\r\n                {step3 ? (\r\n                    <LinkContainer to={AppRoutes.PLACE_ORDER}>\r\n                        <Nav.Link>Place Order</Nav.Link>\r\n                    </LinkContainer>\r\n                ) : (\r\n                    <Nav.Link disabled>Place Order</Nav.Link>\r\n                )}\r\n            </Nav.Item>\r\n        </Nav>\r\n    );\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AppRoutes } from '../config';\r\nimport { StoreRootState } from '../store';\r\n\r\nexport const useCheckout = () => {\r\n    const history = useHistory();\r\n    const { cartItems } = useSelector((state: StoreRootState) => state.cart);\r\n\r\n    if (cartItems.length === 0) {\r\n        history.push(AppRoutes.HOME);\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from '../components/FormContainer';\r\nimport { CheckoutSteps } from '../components/CheckoutSteps';\r\n\r\nimport { StoreRootState } from '../store';\r\nimport { asyncUpdateUser } from '../store/user';\r\n\r\nimport { User } from '../types';\r\nimport { AppRoutes } from '../config';\r\nimport { isObjectFull } from '../utils/isObjectEmpty';\r\n\r\nimport { useCheckout } from '../hooks/useCheckout';\r\n\r\nexport const ShippingPage = () => {\r\n    useCheckout();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {\r\n        currentUser: { shippingAddress },\r\n    } = useSelector((state: StoreRootState) => state.user);\r\n\r\n    const [address, setAddress] = useState<string>(shippingAddress.address);\r\n    const [city, setCity] = useState<string>(shippingAddress.city);\r\n    const [postalCode, setPostalCode] = useState<string>(\r\n        shippingAddress.postalCode\r\n    );\r\n    const [country, setCountry] = useState<string>(shippingAddress.country);\r\n\r\n    const onSubmitHandler = (event: React.FormEvent<HTMLFontElement>) => {\r\n        event.preventDefault();\r\n\r\n        if (!isObjectFull(shippingAddress)) return;\r\n\r\n        history.push(AppRoutes.PAYMENT);\r\n    };\r\n\r\n    // TODO types casting\r\n    const onUpdateHandler = () => {\r\n        dispatch(\r\n            asyncUpdateUser({\r\n                shippingAddress: {\r\n                    address,\r\n                    city,\r\n                    postalCode,\r\n                    country,\r\n                },\r\n            } as User)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 />\r\n            <h1>Shipping page</h1>\r\n            <Form onSubmit={onSubmitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={address}\r\n                        placeholder=\"Enter address\"\r\n                        onChange={(event) => setAddress(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={city}\r\n                        placeholder=\"Enter city\"\r\n                        onChange={(event) => setCity(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={postalCode}\r\n                        placeholder=\"Enter postal dode\"\r\n                        onChange={(event) => setPostalCode(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={country}\r\n                        placeholder=\"Enter country\"\r\n                        onChange={(event) => setCountry(event.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n                <Row className=\"justify-content-md-between\">\r\n                    <Col md={5} lg={5}>\r\n                        <Button type=\"button\" onClick={onUpdateHandler}>\r\n                            Update Shipping address\r\n                        </Button>\r\n                    </Col>\r\n                    <Col md={5} lg={5}>\r\n                        <Button type=\"submit\">Go to payment</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </FormContainer>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from '../components/FormContainer';\r\nimport { CheckoutSteps } from '../components/CheckoutSteps';\r\n\r\nimport { StoreRootState } from '../store';\r\nimport { asyncCartAddPaymentMethod } from '../store/cart';\r\n\r\nimport { isObjectFull } from '../utils/isObjectEmpty';\r\nimport { AppRoutes } from '../config';\r\nimport { useCheckout } from '../hooks/useCheckout';\r\n\r\ninterface PaymentMethod {\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    id: string;\r\n    isChecked: boolean;\r\n}\r\n\r\nexport const PaymentPage = () => {\r\n    useCheckout();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {\r\n        currentUser: { shippingAddress },\r\n    } = useSelector((state: StoreRootState) => state.user);\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (!isObjectFull(shippingAddress)) {\r\n            history.push(AppRoutes.SHIPPING);\r\n        }\r\n    }, [shippingAddress]);\r\n\r\n    const onSubmitHandler = (event: React.FormEvent<HTMLFontElement>) => {\r\n        event.preventDefault();\r\n        dispatch(asyncCartAddPaymentMethod(paymentMethod));\r\n        history.push(AppRoutes.PLACE_ORDER);\r\n    };\r\n\r\n    const paymentMethods: PaymentMethod[] = [\r\n        {\r\n            name: 'paymentMethod',\r\n            label: 'PayPal',\r\n            value: 'PayPal',\r\n            id: 'paypal-method',\r\n            isChecked: true,\r\n        },\r\n        {\r\n            name: 'paymentMethod',\r\n            label: 'Stripe',\r\n            value: 'Stripe',\r\n            id: 'stripe-method',\r\n            isChecked: true,\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        setPaymentMethod(paymentMethods[0].value);\r\n    }, []);\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Payment page</h1>\r\n            <Form onSubmit={onSubmitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label>Payment Methods</Form.Label>\r\n                    {paymentMethods.map((payment: PaymentMethod) => {\r\n                        return (\r\n                            <Form.Check\r\n                                key={payment.id}\r\n                                checked={paymentMethod === payment.value}\r\n                                type=\"radio\"\r\n                                name={payment.name}\r\n                                id={payment.id}\r\n                                label={payment.label}\r\n                                value={payment.value}\r\n                                onChange={(\r\n                                    event: React.ChangeEvent<HTMLInputElement>\r\n                                ) => setPaymentMethod(event.target.value)}\r\n                            />\r\n                        );\r\n                    })}\r\n                </Form.Group>\r\n\r\n                <Button type=\"submit\">Place Order</Button>\r\n            </Form>\r\n        </FormContainer>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { CartProduct } from '../types';\r\n\r\nimport { addDecimals } from '../utils/addDecimals';\r\n\r\nexport const useSummary = (cart: CartProduct[]) => {\r\n    // add consts\r\n    const [itemsPrice, setItemsPrice] = useState<number>();\r\n    const [shippingPrice, setShippingPrice] = useState<number>();\r\n    const [taxPrice, setTaxPrice] = useState<number>();\r\n    const [totalPrice, setTotalPrice] = useState<number>();\r\n\r\n    const itemsPriceCalc = (cart: CartProduct[]): number => {\r\n        return Number(\r\n            cart\r\n                .reduce(\r\n                    (acc: number, current: CartProduct) =>\r\n                        acc + current.qty * current.price,\r\n                    0\r\n                )\r\n                .toFixed(2)\r\n        );\r\n    };\r\n\r\n    const shippingPriceCalc = (itemsPrice: number): number =>\r\n        itemsPrice > 100 ? 0 : 100;\r\n\r\n    const taxPriceCalc = (itemsPrice: number): number => {\r\n        return addDecimals(Number((0.15 * itemsPrice).toFixed(2)));\r\n    };\r\n\r\n    const totalPriceCalc = (\r\n        itemsPrice: number,\r\n        shippingPrice: number,\r\n        taxPrice: number\r\n    ) => {\r\n        return Number((itemsPrice + shippingPrice + taxPrice).toFixed(2));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setItemsPrice(itemsPriceCalc(cart));\r\n    }, [cart]);\r\n\r\n    useEffect(() => {\r\n        setShippingPrice(shippingPriceCalc(itemsPrice as number));\r\n        setTaxPrice(taxPriceCalc(itemsPrice as number));\r\n    }, [itemsPrice]);\r\n\r\n    useEffect(() => {\r\n        setTotalPrice(\r\n            totalPriceCalc(\r\n                itemsPrice as number,\r\n                shippingPrice as number,\r\n                taxPrice as number\r\n            )\r\n        );\r\n    }, [itemsPrice, shippingPrice, taxPrice]);\r\n\r\n    return [itemsPrice, shippingPrice, taxPrice, totalPrice];\r\n};\r\n","export const addDecimals = (num: number): number => {\r\n    return Number(((num * 100) / 100).toFixed(2));\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    ListGroup,\r\n    Image,\r\n    Card,\r\n    Table,\r\n} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CartProduct, Order } from '../types';\r\nimport { AppRoutes } from '../config';\r\n\r\nimport { Message } from '../components/Message';\r\nimport { CheckoutSteps } from '../components/CheckoutSteps';\r\n\r\nimport { useSummary } from '../hooks/useSummary';\r\n\r\nimport { StoreRootState } from '../store';\r\nimport { asyncOrderCreate } from '../store/order';\r\nimport { asyncCartReset } from '../store/cart';\r\nimport { useCheckout } from '../hooks/useCheckout';\r\n\r\nexport const PlaceOrderPage = () => {\r\n    useCheckout();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {\r\n        currentUser: { shippingAddress },\r\n    } = useSelector((state: StoreRootState) => state.user);\r\n    const { address, city, country, postalCode } = shippingAddress;\r\n    const { cartItems, paymentMethod } = useSelector(\r\n        (state: StoreRootState) => state.cart\r\n    );\r\n    const { lastOrder } = useSelector((state: StoreRootState) => state.order);\r\n\r\n    const [itemsPrice, shippingPrice, taxPrice, totalPrice] = useSummary(\r\n        cartItems\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (lastOrder && lastOrder.isPlaced) {\r\n            dispatch(asyncCartReset());\r\n            history.push(AppRoutes.ORDER_SUCCESS);\r\n        }\r\n    }, [lastOrder]);\r\n\r\n    // TODO types casting\r\n    const onPlaceOrderHandler = () => {\r\n        dispatch(\r\n            asyncOrderCreate({\r\n                orderItems: cartItems,\r\n                shippingAddress: shippingAddress,\r\n                paymentMethod,\r\n                itemsPrice,\r\n                shippingPrice,\r\n                taxPrice,\r\n                totalPrice,\r\n            } as Order)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2 step3 />\r\n            <h1>Place Order</h1>\r\n            <Row>\r\n                <Col sm={8}>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>\r\n                            <h4>Shipping</h4>\r\n                            <p>\r\n                                <strong>Address: </strong>\r\n                                {address}, {city}, {postalCode}, {country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h4>Payment Method</h4>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Image</th>\r\n                                <th>Product Name</th>\r\n                                <th>Price</th>\r\n                                <th>Quantity</th>\r\n                                <th>Total price</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {cartItems.map(\r\n                                (product: CartProduct, index: number) => {\r\n                                    return (\r\n                                        <tr key={product.id}>\r\n                                            <td>{index}</td>\r\n                                            <td>\r\n                                                <Image\r\n                                                    style={{\r\n                                                        width: '100px',\r\n                                                    }}\r\n                                                    src={product.image}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Link\r\n                                                    to={`${AppRoutes.PRODUCT}/${product.id}`}\r\n                                                >\r\n                                                    {product.name}\r\n                                                </Link>\r\n                                            </td>\r\n                                            <td>{product.price}</td>\r\n                                            <td>{product.qty}</td>\r\n                                            <td>\r\n                                                <span>\r\n                                                    {product.qty} x{' '}\r\n                                                    {product.price} = $\r\n                                                    {(\r\n                                                        product.qty *\r\n                                                        product.price\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n                <Col sm={4}>\r\n                    <Card>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item>\r\n                                <h4>Order Summary</h4>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total</Col>\r\n                                    <Col>${totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    block\r\n                                    type=\"button\"\r\n                                    onClick={onPlaceOrderHandler}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Button, ListGroup } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { orderClearLast } from '../store/order';\r\nimport { StoreRootState } from '../store';\r\nimport { AppRoutes } from '../config';\r\n\r\nexport const OrderSuccess = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { currentUser } = useSelector((state: StoreRootState) => state.user);\r\n    const { lastOrder } = useSelector((state: StoreRootState) => state.order);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(orderClearLast());\r\n        };\r\n    }, []);\r\n\r\n    if (!lastOrder) {\r\n        history.push(AppRoutes.HOME);\r\n\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListGroup>\r\n                <ListGroup.Item variant=\"success\">\r\n                    Thank you {currentUser.name} for your purchase! Order ID#{' '}\r\n                    {lastOrder.id}\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <Link to={`${AppRoutes.ORDER_DETAILS}/${lastOrder.id}`}>\r\n                        Go to Order Details Page{' '}\r\n                    </Link>\r\n                </ListGroup.Item>\r\n            </ListGroup>\r\n        </>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nimport { asyncGetOrder, asyncOrderPay, orderPayReset } from '../store/order';\r\nimport { CartProduct } from '../types';\r\nimport { StoreRootState } from '../store';\r\n\r\nimport { Row, Col, ListGroup, Image, Card, Table } from 'react-bootstrap';\r\n\r\nimport { Message } from '../components/Message';\r\nimport { Loader } from '../components/Loader';\r\nimport { AppRoutes } from '../config';\r\nimport { axiosInstance } from '../services/axiosInstance';\r\n\r\n// ! FIX lastOrder can be NULL\r\nexport const OrderDetails = () => {\r\n    const dispatch = useDispatch();\r\n    const { id: orderId } = useParams<{ id: string }>();\r\n    const { lastOrder, loading, error } = useSelector(\r\n        (state: StoreRootState) => state.order\r\n    );\r\n    const {\r\n        success: successPay,\r\n        loading: loadingPay,\r\n        error: errorPay,\r\n    } = useSelector((state: StoreRootState) => state.order.orderPay);\r\n\r\n    const [sdkReady, setSdkReady] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncGetOrder(orderId));\r\n    }, []);\r\n\r\n    // ! Need to think about this logic ( Now we have order and orderPay to implement this )\r\n    useEffect(() => {\r\n        const addPaypalScript = async () => {\r\n            const { data: clientId } = await axiosInstance.get(\r\n                '/config/paypal'\r\n            );\r\n            const script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n            script.async = true;\r\n            script.onload = () => {\r\n                setSdkReady(true);\r\n            };\r\n\r\n            document.body.appendChild(script);\r\n        };\r\n\r\n        if (lastOrder && successPay) {\r\n            dispatch(orderPayReset());\r\n            dispatch(asyncGetOrder(orderId));\r\n            // @ts-ignore\r\n        } else if (lastOrder && !successPay) {\r\n            // @ts-ignore\r\n            if (!window.paypal) {\r\n                addPaypalScript();\r\n            } else {\r\n                setSdkReady(true);\r\n            }\r\n        }\r\n    }, [lastOrder, successPay]);\r\n\r\n    const onSuccessHandler = (paymentResult: any) => {\r\n        dispatch(asyncOrderPay(lastOrder?.id as string, paymentResult));\r\n    };\r\n\r\n    if (lastOrder === null) {\r\n        return null;\r\n    }\r\n\r\n    const { shippingAddress } = lastOrder;\r\n\r\n    return (\r\n        <>\r\n            <h1>Order {lastOrder.id}</h1>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant=\"danger\">Smth is wrong</Message>\r\n            ) : (\r\n                <Row>\r\n                    <Col sm={9}>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item>\r\n                                <h4>Shipping</h4>\r\n                                <p>\r\n                                    <strong>Name:</strong>{' '}\r\n                                    {lastOrder.user?.name}\r\n                                </p>\r\n                                <p>\r\n                                    <strong>Email:</strong>{' '}\r\n                                    {lastOrder.user?.email}\r\n                                </p>\r\n                                <p>\r\n                                    <strong>Address: </strong>\r\n                                    {shippingAddress.address},{' '}\r\n                                    {shippingAddress.city},{' '}\r\n                                    {shippingAddress.postalCode},{' '}\r\n                                    {shippingAddress.country}\r\n                                </p>\r\n                                {lastOrder.isDelivered ? (\r\n                                    <Message variant=\"success\">\r\n                                        Delivered on {lastOrder.deliveredAt}\r\n                                    </Message>\r\n                                ) : (\r\n                                    <Message variant=\"danger\">\r\n                                        Not delivered\r\n                                    </Message>\r\n                                )}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <h4>Payment Method</h4>\r\n                                <p>\r\n                                    <strong>Method: </strong>\r\n                                    {lastOrder.paymentMethod}\r\n                                </p>\r\n                                {lastOrder.isPaid ? (\r\n                                    <Message variant=\"success\">\r\n                                        Paid on {lastOrder.paidAt}\r\n                                    </Message>\r\n                                ) : (\r\n                                    <Message variant=\"danger\">Not paid</Message>\r\n                                )}\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Image</th>\r\n                                    <th>Product Name</th>\r\n                                    <th>Price</th>\r\n                                    <th>Quantity</th>\r\n                                    <th>Total price</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {lastOrder.orderItems.map(\r\n                                    (product: CartProduct, index: number) => {\r\n                                        return (\r\n                                            <tr key={product.id}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>\r\n                                                    <Image\r\n                                                        style={{\r\n                                                            width: '100px',\r\n                                                        }}\r\n                                                        src={product.image}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Link\r\n                                                        to={`${AppRoutes.PRODUCT}/${product.id}`}\r\n                                                    >\r\n                                                        {product.name}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>{product.price}</td>\r\n                                                <td>{product.qty}</td>\r\n                                                <td>\r\n                                                    <span>\r\n                                                        {product.qty} x{' '}\r\n                                                        {product.price} = $\r\n                                                        {(\r\n                                                            product.qty *\r\n                                                            product.price\r\n                                                        ).toFixed(2)}\r\n                                                    </span>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                    <Col sm={3}>\r\n                        <Card>\r\n                            <ListGroup variant=\"flush\">\r\n                                <ListGroup.Item>\r\n                                    <h4>Order Summary</h4>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Items</Col>\r\n                                        <Col>${lastOrder.itemsPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Shipping</Col>\r\n                                        <Col>${lastOrder.shippingPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Tax</Col>\r\n                                        <Col>${lastOrder.taxPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Total</Col>\r\n                                        <Col>${lastOrder.totalPrice}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                {!lastOrder.isPaid && (\r\n                                    <ListGroup.Item>\r\n                                        {loadingPay && <Loader />}\r\n                                        {!sdkReady ? (\r\n                                            <Loader />\r\n                                        ) : (\r\n                                            <PayPalButton\r\n                                                amount={lastOrder.itemsPrice}\r\n                                                onSuccess={onSuccessHandler}\r\n                                            />\r\n                                        )}\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { AppRoutes } from '../config';\n\nimport { Header } from './Header';\nimport Footer from './Footer';\nimport { HomePage } from '../pages/HomePage';\nimport { ProductPage } from '../pages/ProductPage';\nimport { CartPage } from '../pages/CartPage';\nimport { SignInPage } from '../pages/SignInPage';\nimport { SignUpPage } from '../pages/SignUpPage';\nimport { UserPage } from '../pages/UserPage';\nimport { ShippingPage } from '../pages/ShippingPage';\nimport { PaymentPage } from '../pages/PaymentPage';\nimport { PlaceOrderPage } from '../pages/PlaceOrderPage';\nimport { OrderSuccess } from '../pages/OrderSuccess';\nimport { OrderDetails } from '../pages/OrderDetails';\n\nimport { asyncGetProducts } from '../store/productList';\nimport { StoreRootState } from '../store';\n\n// TODO Component Type\ninterface PrivateRouteProps {\n    exact?: boolean;\n    component: any;\n    path: string;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({\n    component: Component,\n    ...rest\n}: PrivateRouteProps) => {\n    const isSignedIn = useSelector(\n        (state: StoreRootState) => state.user.isSignedIn\n    );\n\n    return (\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /signin page\n        <Route\n            {...rest}\n            render={(props) =>\n                isSignedIn ? (\n                    <Component {...props} />\n                ) : (\n                    <Redirect to={`${AppRoutes.SIGNIN}`} />\n                )\n            }\n        />\n    );\n};\n\nexport const App: React.FC = (): JSX.Element => {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Header />\n                <main className=\"py-3\">\n                    <Container>\n                        <Switch>\n                            <Route\n                                exact\n                                path={AppRoutes.HOME}\n                                component={HomePage}\n                            />\n                            <Route\n                                path={AppRoutes.SIGNIN}\n                                component={SignInPage}\n                            />\n                            <Route\n                                path={AppRoutes.SIGNUP}\n                                component={SignUpPage}\n                            />\n                            <Route\n                                path={`${AppRoutes.PRODUCT}/:id`}\n                                component={ProductPage}\n                            />\n                            <Route\n                                path={`${AppRoutes.CART}/:id`}\n                                component={CartPage}\n                            />\n                            <Route\n                                path={`${AppRoutes.CART}`}\n                                component={CartPage}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.SHIPPING}`}\n                                component={ShippingPage}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.PAYMENT}`}\n                                component={PaymentPage}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.PLACE_ORDER}`}\n                                component={PlaceOrderPage}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.ORDER_SUCCESS}`}\n                                component={OrderSuccess}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.ORDER_DETAILS}/:id`}\n                                component={OrderDetails}\n                            />\n                            <PrivateRoute\n                                path={`${AppRoutes.PROFILE}`}\n                                component={UserPage}\n                            />\n                        </Switch>\n                    </Container>\n                </main>\n                <Footer />\n            </Router>\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { productListReducer, ProductsState } from './productList';\r\nimport { productDetailReducer, ProductDetailState } from './productDetail';\r\nimport { cartReducer, CartState } from './cart';\r\nimport { userReducer, UserState, isSignedIn } from './user';\r\nimport { orderReducer, OrderState } from './order';\r\n\r\nimport { CartProduct, User } from '../types';\r\n\r\nexport interface StoreRootState {\r\n    products: ProductsState;\r\n    productDetail: ProductDetailState;\r\n    cart: CartState;\r\n    user: UserState;\r\n    order: OrderState;\r\n}\r\n\r\nconst reducers = combineReducers<StoreRootState>({\r\n    products: productListReducer,\r\n    productDetail: productDetailReducer,\r\n    cart: cartReducer,\r\n    user: userReducer,\r\n    order: orderReducer,\r\n});\r\n\r\n// type reducerType = typeof reducers;\r\n// type AppStateType = ReturnType<reducerType>\r\n\r\nconst middlewares = [thunk];\r\n\r\nlet persistCartItems = localStorage.getItem('cartItems');\r\nlet persistUser = localStorage.getItem('user');\r\nlet persistPaymentMethod = localStorage.getItem('paymentMethod');\r\nlet cartItems: CartProduct[] = [];\r\nlet currentUser: User = {} as User;\r\nlet paymentMethod: string = '';\r\n\r\nif (persistCartItems) {\r\n    cartItems = JSON.parse(persistCartItems);\r\n}\r\n\r\nif (persistUser) {\r\n    currentUser = JSON.parse(persistUser);\r\n}\r\n\r\nif (persistPaymentMethod) {\r\n    paymentMethod = JSON.parse(persistPaymentMethod);\r\n}\r\n\r\n// TODO Types for initial state\r\n\r\nconst initialState = {\r\n    cart: {\r\n        cartItems,\r\n        paymentMethod: paymentMethod || null,\r\n    },\r\n    user: {\r\n        currentUser: currentUser,\r\n        loading: false,\r\n        error: null,\r\n        isSignedIn: isSignedIn(),\r\n    },\r\n};\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nimport './index.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}